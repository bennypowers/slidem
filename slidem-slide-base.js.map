{"version":3,"names":[],"mappings":"","sources":["slidem-slide-base.js"],"sourcesContent":["import { GluonElement, html } from '../gluonjs/gluon.js';\n\nconst styleText = document.createTextNode(`\n  /* SLIDEM SLIDE GLOBAL STYLES */\n\n  [reveal] {\n    opacity: 0;\n    transition: opacity 0.2s;\n  }\n`);\n\nconst styleNode = document.createElement('style');\nstyleNode.appendChild(styleText);\ndocument.head.appendChild(styleNode);\n\nconst slidemStyle = html`\n  <style>\n    :host {\n      overflow: hidden;\n      justify-content: center;\n      align-items: center;\n      background-size: cover;\n      background-position: center;\n      display: flex;\n    }\n\n    :host([zoom-in]) #content, :host([zoom-out]) #content {\n      animation-duration: 0.4s;\n      animation-fill-mode: both;\n      animation-timing-function: ease-in-out;\n    }\n\n    @keyframes zoom-in {\n      from {\n        opacity: 0;\n        transform: scale(0);\n      }\n      to {\n        opacity: 1;\n        transform: scale(var(--slidem-content-scale, 1));\n      }\n    }\n\n    @keyframes zoom-out {\n      from {\n        opacity: 1;\n        transform: scale(var(--slidem-content-scale, 1));\n      }\n      to {\n        opacity: 0;\n        transform: scale(0);\n      }\n    }\n\n    :host([zoom-in][active].animate-forward) #content {\n      animation-name: zoom-in;\n    }\n\n    :host([zoom-in][previous].animate-backward) #content {\n      animation-name: zoom-out;\n    }\n\n    :host([zoom-out][previous].animate-forward) #content {\n      animation-name: zoom-out;\n    }\n\n    :host([zoom-out][active].animate-backward) #content {\n      animation-name: zoom-in;\n    }\n\n    #content {\n      width: var(--slidem-content-width, 1760px);\n      max-height: var(--slidem-content-height, 990px);\n      flex-shrink: 0;\n    }\n\n    :host(:not([center])) #content {\n      height: var(--slidem-content-height, 990px);\n    }\n  </style>\n`;\n\nexport class SlidemSlideBase extends GluonElement {\n  get template() {\n    if (this.getAttribute('fullscreen') !== null || this.constructor.fullscreen) {\n      return html`\n        ${slidemStyle}\n        ${(this.constructor.name !== 'SlidemSlide' && this.content) || html`<slot id=\"slot\"></slot>`}\n      `;\n    } else {\n      return html`\n        ${slidemStyle}\n        <div id=\"content\">\n          ${(this.constructor.name !== 'SlidemSlide' && this.content) || html`<slot id=\"slot\"></slot>`}\n        </div>\n      `;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this._steps = Array.from(this.querySelectorAll('[reveal]'));\n    this.steps = this._steps.length;\n    this.__resizeContent();\n    let resizeTimeout;\n    window.addEventListener('resize', () => {\n      window.clearTimeout(resizeTimeout);\n      resizeTimeout = window.setTimeout(() => {\n        this.__resizeContent();\n      }, 200);\n    });\n  }\n\n  static get observedAttributes() {\n    return ['step'];\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    if (attr === 'step') {\n      const step = Number(newVal);\n      if (step > this.steps + 1) {\n        this.setAttribute('step', this.steps + 1);\n        return;\n      }\n      this.__setStep(step);\n    }\n  }\n\n  set step(step) {\n    this.setAttribute('step', step);\n  }\n\n  get step() {\n    return Number(this.getAttribute('step')) || 1;\n  }\n\n  __setStep(newStep) {\n    this._steps.forEach((step, i) => {\n      if (i < newStep - 1) {\n        step.style.opacity = 1;\n      } else {\n        step.style.opacity = 0;\n      }\n    });\n  }\n\n  __resizeContent() {\n    const width = Number((window.getComputedStyle(document.documentElement).getPropertyValue('--slidem-content-width') || '1760px').slice(0, -2));\n    const height = Number((window.getComputedStyle(document.documentElement).getPropertyValue('--slidem-content-height') || '990px').slice(0, -2));\n    const scale = Math.min(window.innerHeight / height, window.innerWidth / 1.1 / width);\n    if (scale < 1) {\n      document.documentElement.style.setProperty('--slidem-content-scale', scale);\n      this.$.content && (this.$.content.style.transform = `scale(${scale})`);\n    } else {\n      document.documentElement.style.setProperty('--slidem-content-scale', 1);\n      this.$.content && (this.$.content.style.transform = `scale(1)`);\n    }\n  }\n}\n\ncustomElements.define(SlidemSlideBase.is, SlidemSlideBase);\n"],"file":"slidem-slide-base.js"}