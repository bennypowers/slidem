{"version":3,"names":[],"mappings":"","sources":["slidem-basic-slide.js"],"sourcesContent":["import { GluonElement, html } from '../gluonjs/gluon.js';\nimport { SlidemSlide } from './slidem-slide.js';\n\nconst styleText = document.createTextNode(`\n  /* SLIDEM BASIC SLIDE STYLE */\n  slidem-basic-slide h1,\n  slidem-basic-slide h2,\n  slidem-basic-slide h3,\n  slidem-basic-slide h4,\n  slidem-basic-slide h5,\n  slidem-basic-slide h6,\n  slidem-basic-slide p {\n    margin-top: 0px;\n    margin-bottom: 0px;\n  }\n\n  slidem-basic-slide a {\n    color: inherit;\n    text-decoration: none;\n  }\n`);\n\nconst styleNode = document.createElement('style');\nstyleNode.appendChild(styleText);\ndocument.head.appendChild(styleNode);\n\nexport class SlidemBasicSlide extends SlidemSlide {\n  connectedCallback() {\n    super.connectedCallback();\n    const background = this.getAttribute('background');\n    if (background) {\n      if (background.match(/^--[a-zA-Z-]*$/)) {\n        this.style.background = `var(${background})`;\n      } else if (background.match(/^http/) || background.match(/^\\//)) {\n        const darken = this.getAttribute('darken-background');\n        let image = `url(${background})`;\n        if (darken) {\n          image = `linear-gradient(rgba(0,0,0,${darken}), rgba(0,0,0,${darken})), ${image}`;\n        }\n        this.style.backgroundImage = image;\n      } else {\n        this.style.background = background;\n      }\n    }\n\n    this.textNodes = Array.from(this.querySelectorAll('h1, h2, h3, h4, h5, h6, p, span'));\n    this.textNodes.forEach(textNode => {\n      if (textNode.getAttribute('bold') !== null) {\n        textNode.style.fontWeight = 'bold';\n      }\n      if (textNode.getAttribute('italic') !== null) {\n        textNode.style.fontStyle = 'italic';\n      }\n      if (textNode.getAttribute('uppercase') !== null) {\n        textNode.style.textTransform = 'uppercase';\n      }\n      if (textNode.getAttribute('center') !== null) {\n        textNode.style.textAlign = 'center';\n      }\n      if (textNode.getAttribute('line-height') !== null) {\n        textNode.style.lineHeight = textNode.getAttribute('line-height');\n      }\n      const color = textNode.getAttribute('color');\n      if (color !== null) {\n        if (color.match(/^--[a-zA-Z-]*$/)) {\n          textNode.style.color = `var(${color})`;\n        } else {\n          textNode.style.color = color;\n        }\n      }\n    });\n\n    this.layoutNodes = Array.from(this.getElementsByTagName('div'));\n    this.layoutNodes.forEach(layoutNode => {\n      if (layoutNode.getAttribute('center') !== null) {\n        layoutNode.style.display = 'flex';\n        layoutNode.style.justifyContent = 'center';\n        layoutNode.style.alignItems = 'center';\n      }\n    });\n  }\n\n  static get observedAttributes() {\n    const attrs = super.observedAttributes || [];\n    attrs.push('active');\n    return attrs;\n  }\n\n  attributeChangedCallback(attr, oldVal, newVal) {\n    super.attributeChangedCallback(attr, oldVal, newVal);\n    if (attr === 'active') {\n      if (newVal !== null) {\n        this.__rescale();\n      }\n    }\n  }\n\n  __rescale() {\n    this.textNodes.forEach(textNode => {\n      if (textNode.getAttribute('fit') !== null) {\n        textNode.style.display = 'table';\n        const refFontSize = parseFloat(window.getComputedStyle(textNode, null).getPropertyValue('font-size'));\n        const refWidth = this.$.content.clientWidth;\n        textNode.style.fontSize = `${Math.floor(refFontSize * refWidth / textNode.clientWidth) - 1}px`;\n      }\n    });\n  }\n}\n\ncustomElements.define(SlidemBasicSlide.is, SlidemBasicSlide);\n"],"file":"slidem-basic-slide.js"}