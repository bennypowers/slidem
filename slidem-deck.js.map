{"version":3,"names":[],"mappings":"","sources":["slidem-deck.js"],"sourcesContent":["import { GluonElement, html } from '../gluonjs/gluon.js';\nimport { onRouteChange, currentPath, currentQuery, currentHash } from '../gluon-router/gluon-router.js';\n\nimport '../fontfaceobserver/fontfaceobserver.standalone.js';\nimport { GluonKeybinding } from '../gluon-keybinding/gluon-keybinding.js';\n\nconst styleText = document.createTextNode(`\n  /* SLIDEM GLOBAL STYLES */\n  body {\n    margin: 0;\n  }\n\n\n  [reveal] {\n    opacity: 0;\n    transition: opacity 0.2s;\n  }\n\n  /* Keyframes are defined here to patch a scoping bug in Chrome */\n  @keyframes slidem-fade-in {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n\n  @keyframes slidem-fade-out {\n    from {\n      opacity: 1;\n    }\n    to {\n      opacity: 0;\n    }\n  }\n\n  @keyframes slidem-slide-in-forward {\n    from {\n      transform: translateX(100vw);\n    }\n    to {\n      transform: translateX(0);\n    }\n  }\n\n  @keyframes slidem-slide-in-backward {\n    from {\n      transform: translateX(0);\n    }\n    to {\n      transform: translateX(100vw);\n    }\n  }\n\n  @keyframes slidem-slide-out-forward {\n    from {\n      transform: translateX(0);\n    }\n    to {\n      transform: translateX(-100vw);\n    }\n  }\n\n  @keyframes slidem-slide-out-backward {\n    from {\n      transform: translateX(-100vw);\n    }\n    to {\n      transform: translateX(0);\n    }\n  }\n`);\n\nconst styleNode = document.createElement('style');\nstyleNode.appendChild(styleText);\ndocument.head.appendChild(styleNode);\n\nexport class SlidemDeck extends GluonElement {\n  get template() {\n    return html`\n      <div class=\"slides\">\n        <slot id=\"slides\"></slot>\n      </div>\n      <div id=\"progress\"></div>\n      <div id=\"timer\"></div>\n      <gluon-keybinding id=\"timerToggle\" key=\"t\"></gluon-keybinding>\n      <gluon-keybinding id=\"presenterToggle\" key=\"p\"></gluon-keybinding>\n      <div id=\"forward\">\n        <gluon-keybinding key=\"PageDown\"></gluon-keybinding>\n        <gluon-keybinding key=\"ArrowRight\"></gluon-keybinding>\n      </div>\n      <div id=\"backward\">\n        <gluon-keybinding key=\"PageUp\"></gluon-keybinding>\n        <gluon-keybinding key=\"ArrowLeft\"></gluon-keybinding>\n      </div>\n      <style>\n        @keyframes slidem-fade-in {\n          from {\n            opacity: 0;\n          }\n          to {\n            opacity: 1;\n          }\n        }\n\n        @keyframes slidem-fade-out {\n          from {\n            opacity: 1;\n          }\n          to {\n            opacity: 0;\n          }\n        }\n\n        @keyframes slidem-slide-in-forward {\n          from {\n            transform: translateX(100vw);\n          }\n          to {\n            transform: translateX(0);\n          }\n        }\n\n        @keyframes slidem-slide-in-backward {\n          from {\n            transform: translateX(0);\n          }\n          to {\n            transform: translateX(100vw);\n          }\n        }\n\n        @keyframes slidem-slide-out-forward {\n          from {\n            transform: translateX(0);\n          }\n          to {\n            transform: translateX(-100vw);\n          }\n        }\n\n        @keyframes slidem-slide-out-backward {\n          from {\n            transform: translateX(-100vw);\n          }\n          to {\n            transform: translateX(0);\n          }\n        }\n        :host {\n          display: block;\n          overflow: hidden;\n          position: absolute;\n          top: 0;\n          left: 0;\n          bottom: 0;\n          right: 0;\n          font-family: 'sans-serif';\n          font-size: 56px;\n          line-height: 1;\n        }\n\n        .slides ::slotted(*) {\n          position: absolute;\n          top: 0;\n          right: 0;\n          bottom: 0;\n          left: 0;\n          animation-duration: 0.4s;\n          animation-fill-mode: both;\n          animation-timing-function: ease-in-out;\n        }\n\n        .slides ::slotted(:not([active]):not([previous]):not([next])) {\n          display: none;\n        }\n\n        :host(:not([presenter])) .slides ::slotted([next]:not([previous])) {\n          display: none;\n        }\n\n        #progress {\n          position: absolute;\n          bottom: 0px;\n          left: 0;\n          right: 0;\n          height: 50px;\n          text-align: center;\n          display: flex;\n          flex-flow: row;\n          justify-content: center;\n          z-index: 10;\n        }\n        #progress div {\n          height: 8px;\n          width: 8px;\n          border-radius: 50%;\n          border: 2px solid white;\n          margin-left: 6px;\n          margin-right: 6px;\n          background: transparent;\n          transition: background 0.2s, transform 0.2s;\n        }\n        #progress div.active {\n          background: white;\n          transform: scale(1.3);\n        }\n        :host([progress=\"dark\"]) #progress div {\n          border: 2px solid black;\n        }\n        :host([progress=\"dark\"]) #progress div.active {\n          background: black;\n        }\n        :host([progress=\"none\"]) #progress {\n          display: none;\n        }\n\n        #timer {\n          display: none;\n          position: absolute;\n          top: 5%;\n          right: 5%;\n          color: white;\n          font-size: 4vw;\n          font-weight: bold;\n          font-family: Helvetica, Arial, sans-serif;\n        }\n        :host([presenter]) #timer {\n          display: inline;\n        }\n\n        :host([presenter]) {\n          background: black;\n        }\n        /* White box around active slide */\n        :host([presenter])::before {\n          display: block;\n          position: absolute;\n          content: '';\n          top: calc(25% - 20px);\n          right:  calc(45% - 20px);\n          bottom:  calc(25% - 20px);\n          left:  calc(5% - 20px);\n          border: 2px solid white;\n        }\n        /* White box around next slide */\n        :host([presenter])::after {\n          display: block;\n          position: absolute;\n          content: '';\n          top: calc(32.5% - 20px);\n          right: calc(4.5% - 20px);\n          bottom: calc(32.5% - 20px);\n          left: calc(60.5% - 20px);\n          border: 2px solid white;\n        }\n        :host([presenter]) .slides ::slotted(*) {\n          animation: none !important; /* Block user-configured animations */\n        }\n        :host([presenter]) .slides ::slotted([previous]:not([next])) {\n          display: none;\n        }\n        :host([presenter]) .slides ::slotted([active]) {\n          transform: translate(-20%, 0) scale(0.5) !important; /* Force presenter layout */\n        }\n        :host([presenter]) .slides ::slotted([next]) {\n          transform: translate(28%, 0) scale(0.35) !important; /* Force presenter layout */\n        }\n\n        .slides ::slotted([active]) {\n          z-index: 2;\n        }\n        .slides ::slotted([previous]) {\n          z-index: 0;\n        }\n        .slides ::slotted([fade-in][active].animate-forward) {\n          animation-name: slidem-fade-in;\n        }\n        .slides ::slotted([fade-in][previous].animate-backward) {\n          animation-name: slidem-fade-out;\n          z-index: 3;\n        }\n        .slides ::slotted([fade-out][active].animate-backward) {\n          animation-name: slidem-fade-in;\n        }\n        .slides ::slotted([fade-out][previous].animate-forward) {\n          animation-name: slidem-fade-out;\n          z-index: 3;\n        }\n        .slides ::slotted([slide-in][active].animate-forward) {\n          animation-name: slidem-slide-in-forward;\n        }\n        .slides ::slotted([slide-in][previous].animate-backward) {\n          animation-name: slidem-slide-in-backward;\n          z-index: 3;\n        }\n        .slides ::slotted([slide-out][active].animate-backward) {\n          animation-name: slidem-slide-out-backward;\n        }\n        .slides ::slotted([slide-out][previous].animate-forward) {\n          animation-name: slidem-slide-out-forward;\n          z-index: 3;\n        }\n      </style>\n    `;\n  }\n\n  get presenter() {\n    return this.getAttribute('presenter') !== null;\n  }\n\n  set presenter(value) {\n    if (value) {\n      this.setAttribute('presenter', '');\n    } else {\n      this.removeAttribute('presenter');\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.presenter = currentQuery() === 'presenter';\n    this.$.presenterToggle.addEventListener('click', () => {\n      this.presenter = !this.presenter;\n      changeLocation({ query: (this.presenter && 'presenter') || '', hash: currentHash() });\n    });\n\n    // Presenter mode timer\n    let timerInterval;\n    this.$.timerToggle.addEventListener('click', () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n        timerInterval = undefined;\n        this.$.timer.innerText = '';\n      } else {\n        this.$.timer.innerText = '00:00';\n        let begin = new Date();\n        timerInterval = setInterval(() => (this.$.timer.innerText = __timer(begin)), 1000);\n      }\n    });\n\n    this.slides = Array.from(this.children);\n\n    // Create dots for progress bar\n    this.slides.forEach(slide => {\n      this.$.progress.appendChild(document.createElement('div'));\n    });\n\n    onRouteChange(() => {\n      this.slides[this.currentSlide].step = this.currentStep + 1;\n      this.slides[this.currentSlide].setAttribute('active', '');\n\n      if (this.previousSlide === this.currentSlide) {\n        return;\n      }\n\n      if (this.previousSlide !== undefined) {\n        if (this.previousSlide < this.currentSlide) {\n          this.slides[this.previousSlide].classList.add('animate-forward');\n          this.slides[this.currentSlide].classList.add('animate-forward');\n          this.slides[this.previousSlide].classList.remove('animate-backward');\n          this.slides[this.currentSlide].classList.remove('animate-backward');\n        } else {\n          this.slides[this.previousSlide].classList.add('animate-backward');\n          this.slides[this.currentSlide].classList.add('animate-backward');\n          this.slides[this.previousSlide].classList.remove('animate-forward');\n          this.slides[this.currentSlide].classList.remove('animate-forward');\n        }\n      }\n\n      if (this.oldNextSlide !== undefined) {\n        this.slides[this.oldNextSlide].removeAttribute('next');\n      }\n\n      this.nextSlide = (this.slides[this.currentSlide + 1] && this.currentSlide + 1) || undefined;\n      if (this.nextSlide !== undefined) {\n        this.slides[this.nextSlide].setAttribute('next', '');\n        this.oldNextSlide = this.nextSlide;\n      }\n\n      if (this.oldPreviousSlide !== undefined) {\n        this.slides[this.oldPreviousSlide].removeAttribute('previous');\n      }\n\n      if (this.previousSlide !== undefined) {\n        this.slides[this.previousSlide].removeAttribute('active');\n        this.slides[this.previousSlide].setAttribute('previous', '');\n        this.$.progress.children[this.previousSlide].classList.remove('active');\n        this.oldPreviousSlide = this.previousSlide;\n      }\n\n      this.$.progress.children[this.currentSlide].classList.add('active');\n\n      this.previousSlide = this.currentSlide;\n    });\n\n    const changeLocation = ({ path = currentPath(), query = currentQuery(), hash = currentHash() } = {}) => {\n      path = window.history.pushState({}, '', `${path}${(query && '?' + query) || ''}${(hash && '#' + hash) || ''}`);\n      window.dispatchEvent(new Event('location-changed'));\n      localStorage.setItem('location', currentHash());\n    };\n\n    this.$.forward.onclick = () => {\n      if (this.slides[this.currentSlide].steps && this.slides[this.currentSlide].step <= this.slides[this.currentSlide].steps) {\n        changeLocation({ hash: `slide-${this.currentSlide + 1}/step-${this.slides[this.currentSlide].step + 1}` });\n      } else if (this.currentSlide < this.slides.length - 1) {\n        changeLocation({ hash: `slide-${this.currentSlide + 2}/step-1` });\n      }\n    };\n\n    this.$.backward.onclick = () => {\n      if (this.slides[this.currentSlide].steps && this.slides[this.currentSlide].step > 1) {\n        changeLocation({ hash: `slide-${this.currentSlide + 1}/step-${this.slides[this.currentSlide].step - 1}` });\n      } else if (this.currentSlide > 0) {\n        changeLocation({ hash: `slide-${this.currentSlide}/step-${(this.slides[this.currentSlide - 1].steps || 0) + 1}` });\n      }\n    };\n\n    // Swipe gesture support\n    let touchX;\n    let touchY;\n    document.addEventListener(\n      'touchstart',\n      e => {\n        touchX = e.touches[0].clientX;\n        touchY = e.touches[0].clientY;\n      },\n      false\n    );\n    document.addEventListener(\n      'touchend',\n      e => {\n        const xMove = e.changedTouches[0].clientX - touchX;\n        const yMove = e.changedTouches[0].clientY - touchY;\n        if (Math.abs(xMove) > 60 && Math.abs(xMove) > Math.abs(yMove)) {\n          if (xMove < 0) {\n            this.$.forward.onclick();\n          } else {\n            this.$.backward.onclick();\n          }\n        }\n      },\n      false\n    );\n\n    // FUOC prevention\n    this.removeAttribute('loading');\n\n    // Trigger the router to display the first slide\n    const init = () => {\n      window.requestAnimationFrame(() => window.dispatchEvent(new Event('location-changed')));\n    };\n\n    const font = this.getAttribute('font');\n    if (font) {\n      this.style.fontFamily = font;\n    }\n\n    // Trigger the init after all fonts are loaded or after 3 sec timeout.\n    Promise.all(\n      this.slides\n        .filter(slide => slide.fonts)\n        .map(slide => slide.fonts)\n        .reduce((fonts, slideFonts) => fonts.concat(slideFonts), (font && [font]) || [])\n        .map(font => new FontFaceObserver(font).load())\n    ).then(init, init);\n\n    // Shared navigation between browser windows\n    window.addEventListener('storage', e => {\n      if (e.key === 'location') {\n        if (currentHash() !== e.newValue) {\n          changeLocation({ hash: `${e.newValue}` });\n        }\n      }\n    });\n  }\n\n  get currentSlide() {\n    return (currentHash().match(/(?:slide-(\\d+))?(?:\\/step-(\\d+|Infinity))?/)[1] || 1) - 1;\n  }\n  get currentStep() {\n    return (currentHash().match(/(?:slide-(\\d+))?(?:\\/step-(\\d+|Infinity))?/)[2] || 1) - 1;\n  }\n}\n\n// Returns a string representing elapsed time since 'begin'\nconst __timer = begin => {\n  const time = new Date(new Date() - begin);\n  const pad = t => (t < 10 && '0' + t) || t;\n  const hours = pad(time.getUTCHours());\n  const minutes = pad(time.getUTCMinutes());\n  const seconds = pad(time.getUTCSeconds());\n  return `${(time.getUTCHours() && hours + ':') || ''}${minutes}:${seconds}`;\n};\n\ncustomElements.define(SlidemDeck.is, SlidemDeck);\n"],"file":"slidem-deck.js"}